/*
 * This file is generated by jOOQ.
 */
package org.example.db.jooq.pojo.tables;



import org.example.db.jooq.pojo.Public;
import org.example.db.jooq.pojo.tables.records.ContactsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contacts extends TableImpl<ContactsRecord> {

    private static final long serialVersionUID = -798376522;

    /**
     * The reference instance of <code>public.author</code>
     */
    public static final Contacts CONTACTS = new Contacts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactsRecord> getRecordType() {
        return ContactsRecord.class;
    }

    /**
     * The column <code>public.author.id</code>.
     */
    public final TableField<ContactsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), CONTACTS, "");

    /**
     * The column <code>public.author.first_name</code>.
     */
    public final TableField<ContactsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.author.last_name</code>.
     */
    public final TableField<ContactsRecord, String> SURNAME = createField(DSL.name("surname"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.author.age</code>.
     */

    /**
     * Create a <code>public.author</code> table reference
     */
    public Contacts() {
        this(DSL.name("Contacts"), null);
    }

    /**
     * Create an aliased <code>public.author</code> table reference
     */
    public Contacts(String alias) {
        this(DSL.name(alias), CONTACTS);
    }

    /**
     * Create an aliased <code>public.author</code> table reference
     */
    public Contacts(Name alias) {
        this(alias, CONTACTS);
    }

    private Contacts(Name alias, Table<ContactsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contacts(Name alias, Table<ContactsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Contacts(Table<O> child, ForeignKey<O, ContactsRecord> key) {
        super(child, key, CONTACTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ContactsRecord> getPrimaryKey() {
        return null;
    }

    @Override
    public List<UniqueKey<ContactsRecord>> getKeys() {
        return Arrays.<UniqueKey<ContactsRecord>>asList(null);
    }

    @Override
    public Contacts as(String alias) {
        return new Contacts(DSL.name(alias), this);
    }

    @Override
    public Contacts as(Name alias) {
        return new Contacts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contacts rename(String name) {
        return new Contacts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contacts rename(Name name) {
        return new Contacts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
