/*
 * This file is generated by jOOQ.
 */
package my.startup.information_schema.tables;


import javax.annotation.processing.Generated;

import my.startup.information_schema.InformationSchema;
import my.startup.information_schema.tables.records.UserAttributesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAttributes extends TableImpl<UserAttributesRecord> {

    private static final long serialVersionUID = 1745536468;

    /**
     * The reference instance of <code>information_schema.USER_ATTRIBUTES</code>
     */
    public static final UserAttributes USER_ATTRIBUTES = new UserAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAttributesRecord> getRecordType() {
        return UserAttributesRecord.class;
    }

    /**
     * The column <code>information_schema.USER_ATTRIBUTES.USER</code>.
     */
    public final TableField<UserAttributesRecord, String> USER = createField(DSL.name("USER"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>information_schema.USER_ATTRIBUTES.HOST</code>.
     */
    public final TableField<UserAttributesRecord, String> HOST = createField(DSL.name("HOST"), org.jooq.impl.SQLDataType.CHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>information_schema.USER_ATTRIBUTES.ATTRIBUTE</code>.
     */
    public final TableField<UserAttributesRecord, String> ATTRIBUTE = createField(DSL.name("ATTRIBUTE"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>information_schema.USER_ATTRIBUTES</code> table reference
     */
    public UserAttributes() {
        this(DSL.name("USER_ATTRIBUTES"), null);
    }

    /**
     * Create an aliased <code>information_schema.USER_ATTRIBUTES</code> table reference
     */
    public UserAttributes(String alias) {
        this(DSL.name(alias), USER_ATTRIBUTES);
    }

    /**
     * Create an aliased <code>information_schema.USER_ATTRIBUTES</code> table reference
     */
    public UserAttributes(Name alias) {
        this(alias, USER_ATTRIBUTES);
    }

    private UserAttributes(Name alias, Table<UserAttributesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAttributes(Name alias, Table<UserAttributesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserAttributes(Table<O> child, ForeignKey<O, UserAttributesRecord> key) {
        super(child, key, USER_ATTRIBUTES);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public UserAttributes as(String alias) {
        return new UserAttributes(DSL.name(alias), this);
    }

    @Override
    public UserAttributes as(Name alias) {
        return new UserAttributes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAttributes rename(String name) {
        return new UserAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAttributes rename(Name name) {
        return new UserAttributes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
